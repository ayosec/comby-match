#!/bin/bash
#
# Use comby to search code. Print resuls with pygments

set -euo pipefail

if [ $# -eq 0 ]
then
  echo "Usage: $0 <comby pattern>"
  exit 1
fi

run-comby() {
  docker run --rm --net=none -u "$(id -u)" -v "$PWD:$PWD:ro" -w "$PWD" \
    comby/comby -jobs "$(nproc)" -match-only -json-lines "$@" ""
}

parse-comby-output() {
  jq -r '
    [
      .uri,
      (
        (
          .matches | map(
            [
              ( .range.start.line | tostring ),
              ( .range.end.line | tostring )
            ]
            | join(" "))
        )
        | join("-")
      )
    ]
    | join(":")
  '
}

IS_FIRST=1

run-comby "$@" | parse-comby-output | while IFS=: read -r FILE RANGES
do
  IFS=- read -ra RANGES <<<"$RANGES"

  PAT=""
  SEPS=""
  for RANGE in "${RANGES[@]}"
  do
    read -r START END <<<"$RANGE"
    if [ -n "$PAT" ]; then
      PAT+=" || "

      if [ -n "$SEPS" ]; then
        SEPS+=" || "
      fi
      printf -v SEPS '%sNR == %d' "$SEPS" "$START"
    fi

    printf -v PAT '%s(NR >= %d && NR <= %d)' "$PAT" "$START" "$END"
  done

  AWK="
    $PAT {
      printf \"\\033[0;36m%6d\\033[m\\t%s\\033[m%s\", FNR, \$0, RS
    }
  "

  if [ -n "$SEPS" ]; then
    AWK="
      $SEPS { print \"\" }
      $AWK
    "
  fi

  if [ "$IS_FIRST" -eq 0 ]; then
    echo
  else
    IS_FIRST=0
  fi

  echo -ne '\e[0;35m-- '
  realpath --relative-base="$PWD" "$FILE"
  echo -ne '\e[m'

  ${COMBY_HIGHLIGHT:-pygmentize} "$FILE" | awk "$AWK"
done
